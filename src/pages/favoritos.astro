---
import Layout from '@layouts/Layout.astro';

---

<style is:global>
  .container{
    margin: 2rem 2rem;
  }
  .page-container {
    /* Cambiamos el fondo fijo por la variable que cambia con el modo */
    background: var(--color-fondo);
    min-height: 100vh;
    padding: 20px 0;
  }
  
  /* T√≠tulo con color primario variable */
  .titulo {
    font-size: 2.5rem;
    text-align: center;
    margin: 30px 0 20px;
    color: var(--color-primario);
    font-family: 'Arial Black', sans-serif;
  }
  
  .galeria {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 20px;
    padding: 20px;
  }
  
  .tarjeta {
    position: relative;
    overflow: hidden;
    border-radius: 10px;
    /* Sombra usando variable */
    box-shadow: 0 4px 12px var(--color-sombra);
    cursor: pointer;
    transition: transform 0.3s ease;
  }
  
  .tarjeta img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    display: block;
    transition: transform 0.3s ease;
  }
  
  .tarjeta:hover img {
    transform: scale(1.1);
  }
  
  .overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    /* Fondo semitransparente, puede quedar igual */
    background: var(--color-overlay);
    /* Texto en color variable */
    color: var(--color-texto);
    padding: 15px;
    transform: translateY(100%);
    transition: transform 0.3s ease;
    font-size: 0.9em;
  }
  
  .tarjeta:hover .overlay {
    transform: translateY(0%);
  }
  
  .overlay h3 {
    margin: 0 0 8px;
    font-size: 1rem;
  }
  
  .overlay p {
    margin: 4px 0;
    font-size: 0.85rem;
  }
  
  .paginado {
    /* Usamos color primario para fondo, o podemos hacer un gradiente con variable */
    background: var(--color-paginado);
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    padding-bottom: 3rem;
  }
  
  .boton {
    background-color: var(--color-boton);
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 8px;
    font-weight: bold;
    transition: background-color 0.3s ease;
    cursor: pointer;
  }
  
  .boton:hover:not(.deshabilitado) {
    background-color: var(--color-boton-hover);
  }
  
  .boton.deshabilitado {
    background-color: var(--color-boton-deshabilitado);
    color: var(--color-boton-texto-deshabilitado);
    pointer-events: none;
    cursor: default;
  }
  
  .pagina-actual {
    font-weight: bold;
  }
  
  .favorito-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: var(--color-boton);
    color: white;
    border: none;
    padding: 8px 10px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.2rem;
    z-index: 2;
    transition: background-color 0.3s ease;
  }
  
  .favorito-btn:hover {
    background-color: var(--color-boton-hover);
  }
    </style>

<Layout>
  <div class="container">
    <h1>Mi Lista de Favoritos</h1>
    <a href="/peliculas" class="boton">‚Üê Volver</a>
    <div id="favoritos-galeria" class="galeria"></div>
  </div>
  <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
      async function mostrarFavoritos() {
        const res = await fetch("/data/peliculas.json");
        const peliculas = await res.json();

        window.peliculasData = peliculas;

        const favoritasIds = JSON.parse(localStorage.getItem('favoritos') || '[]');
        const favoritas = window.peliculasData.filter(p => favoritasIds.includes(p.id));

        const galeria = document.getElementById('favoritos-galeria');

        if (favoritas.length === 0) {
          galeria.innerHTML = '<p>No ten√©s pel√≠culas guardadas en tu lista a√∫n.</p>';
          return;
        }

        galeria.innerHTML = favoritas.map(pelicula => `
          <div class="tarjeta">
            <a href="/peliculas/${pelicula.id}">
              <img src="${pelicula.imagen}" alt="${pelicula.titulo}" />
              <div class="overlay">
                <h3>${pelicula.titulo}</h3>
                <p>${pelicula.descripcion}</p>
                <p><strong>Categor√≠a:</strong> ${pelicula.categoria}</p>
                <p><strong>Duraci√≥n:</strong> ${pelicula.duracion}</p>
              </div>
            </a>
            <button class="favorito-btn" data-id="${pelicula.id}">‚ù§Ô∏è</button>
          </div>
        `).join('');

        // Ahora que los botones existen en el DOM, les asignamos los event listeners
        document.querySelectorAll(".favorito-btn").forEach((btn) => {
          const id = parseInt(btn.getAttribute("data-id"));
          btn.textContent = "‚ù§Ô∏è"; // El bot√≥n siempre inicia con ‚ù§Ô∏è

          btn.addEventListener("click", () => {
            let favoritos = JSON.parse(localStorage.getItem("favoritos")) || [];

            if (favoritos.includes(id)) {
              // Quitar de favoritos
              favoritos = favoritos.filter(favId => favId !== id);
              localStorage.setItem("favoritos", JSON.stringify(favoritos));

              btn.textContent = "ü§ç";

              Swal.fire({
                icon: "info",
                title: "Pel√≠cula eliminada",
                text: "Se ha quitado de Mi Lista",
                confirmButtonColor: "#e91e63",
                background: '#d6c0ff',
                timer: 1500,
                showConfirmButton: false
              });

              btn.closest('.tarjeta').remove();

              // Si no quedan favoritos, mostrar mensaje
              if (favoritos.length === 0) {
                galeria.innerHTML = '<p>No ten√©s pel√≠culas guardadas en tu lista a√∫n.</p>';
              }
            }
          });
        });
      }

      mostrarFavoritos();
    });

  </script>

  <script is:inline>
    //script de sesion 
    const usuario = JSON.parse(localStorage.getItem("usuario"));
    if (!usuario) {
      Swal.fire("Debes iniciar sesi√≥n");
      window.location.href = "/";
    }

    //logout
    const logoutBtn = document.getElementById("logout");
    if (logoutBtn) {
    document.getElementById("logout").addEventListener("click", () => {
      Swal.fire({
        icon: "question",
        title: "¬øCerrar sesi√≥n?",
        text: "Se cerrar√° tu sesi√≥n actual",
        showCancelButton: true,
        confirmButtonText: "S√≠, salir",
        cancelButtonText: "Cancelar",
        confirmButtonColor: "#e91e63",
        background: '#d6c0ff'
      }).then((result) => {
        if (result.isConfirmed) {
          localStorage.removeItem("usuario");
          Swal.fire({
            icon: "success",
            title: "Sesi√≥n cerrada",
            showConfirmButton: false,
            timer: 1500,
            background: '#d6c0ff'
          }).then(() => {
            window.location.href = "/";
          });
        }
      });
    });
  }
	</script>

  


</Layout>
